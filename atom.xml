<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>长林</title>
  
  <subtitle>学习前端的个人小博客</subtitle>
  <link href="atom.xml" rel="self"/>
  
  <link href="https://changlin2569.github.io/"/>
  <updated>2020-11-12T14:28:14.039Z</updated>
  <id>https://changlin2569.github.io/</id>
  
  <author>
    <name>changlin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>post</title>
    <link href="2020/11/12/var%20let%20const%E5%8C%BA%E5%88%AB/"/>
    <id>2020/11/12/var%20let%20const%E5%8C%BA%E5%88%AB/</id>
    <published>2020-11-12T13:39:30.000Z</published>
    <updated>2020-11-12T14:28:14.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="var-let-const的区别"><a href="#var-let-const的区别" class="headerlink" title="var let const的区别"></a>var let const的区别</h1><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><ul><li><p>var声明的变量会变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>上述代码会输出undefined</p><h6 id="因为var声明的变量会自动提升到代码顶部，称为变量提升，所以上述代码的工作原理为"><a href="#因为var声明的变量会自动提升到代码顶部，称为变量提升，所以上述代码的工作原理为" class="headerlink" title="因为var声明的变量会自动提升到代码顶部，称为变量提升，所以上述代码的工作原理为"></a>因为var声明的变量会自动提升到代码顶部，称为变量提升，所以上述代码的工作原理为</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h6 id="只是提升了变量的声明，初始化操作发生在原位置"><a href="#只是提升了变量的声明，初始化操作发生在原位置" class="headerlink" title="只是提升了变量的声明，初始化操作发生在原位置"></a>只是提升了变量的声明，初始化操作发生在原位置</h6></li><li><p>var声明的变量不具有块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> x = <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>可以看到输出结果为1，输出了if代码块中的变量</p><h6 id="var声明的变量只具有函数作用域和全局作用域"><a href="#var声明的变量只具有函数作用域和全局作用域" class="headerlink" title="var声明的变量只具有函数作用域和全局作用域"></a>var声明的变量只具有函数作用域和全局作用域</h6></li><li><p>var可以重复声明变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>以上代码在非严格模式下不会报错</p></li></ul><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><ul><li>let声明的变量不会变量提升</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>上述代码会报错</p><h6 id="let不允许在变量声明之前使用这个变量，会触发暂时性死区"><a href="#let不允许在变量声明之前使用这个变量，会触发暂时性死区" class="headerlink" title="let不允许在变量声明之前使用这个变量，会触发暂时性死区"></a>let不允许在变量声明之前使用这个变量，会触发暂时性死区</h6><ul><li>let声明的变量具有块级作用域</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><p>let在代码块中定义的变量，只允许在代码块中访问</p><ul><li>let不允许重复声明变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><p>这样做的目的是减少变量重复赋值造成不可预计的危险</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ul><li>const声明的变量只可读</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure><h6 id="const声明的变量不可以重新赋值，只可读，用于不用修改的变量"><a href="#const声明的变量不可以重新赋值，只可读，用于不用修改的变量" class="headerlink" title="const声明的变量不可以重新赋值，只可读，用于不用修改的变量"></a>const声明的变量不可以重新赋值，只可读，用于不用修改的变量</h6><h6 id="而且const声明变量的时候必须初始化这个变量！"><a href="#而且const声明变量的时候必须初始化这个变量！" class="headerlink" title="而且const声明变量的时候必须初始化这个变量！"></a>而且const声明变量的时候必须初始化这个变量！</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x;</span><br><span class="line"><span class="comment">//error</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;var-let-const的区别&quot;&gt;&lt;a href=&quot;#var-let-const的区别&quot; class=&quot;headerlink&quot; title=&quot;var let const的区别&quot;&gt;&lt;/a&gt;var let const的区别&lt;/h1&gt;&lt;h2 id=&quot;var&quot;&gt;&lt;a h</summary>
      
    
    
    
    
  </entry>
  
</feed>
